gt_ordination_plot
gt_ordination_plot <- plot_ordination(carbom_abund, carbom_abund.ord, type="samples", color="collection_date") +
geom_point(size=1) +
theme_bw()+
theme(axis.title = element_text(size=9),
axis.text = element_text(size=7))+
#guides(colour = guide_legend(nrow = 1))+
theme(legend.position="top")
gt_ordination_plot
ig = make_network(carbom_abund, type = "samples", distance = "bray", max.dist = 0.60)
gt_network_plot <- plot_network(ig, carbom_abund, color = "collection_date", line_weight = 0.3,
label = NULL, point_size = 1)+
theme(legend.position = "bottom")+
guides(shape = guide_legend(nrow = 1))+
guides(size = "legend", colour = "none")
gt_network_plot
# NORMALIZATION BY RAREFACTION
carbom <- phyloseq(gOTU,TAX,samples)
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (date %in% c("t0","t2","t4","t6","t8","t10")))
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (collection_date %in% c("t0","t2","t4","t6","t8","t10")))
# cut out samples with extremely low counts and RAREFY:
carbom_rarefied <- myrarefy_fun(carbom)
carbom_rarefied
c <- carbom_rarefied
c
c1.2 <- filter_taxa(c, function(x) sum(x > 100) > (0.2*length(x)), TRUE)
c1.2
# out of these, take the ones with the highest inter-samples variance
c2 = filter_taxa(c1.2, function(x) var(x) > 40000000, TRUE)
carbom_abund <- carbom_rarefied
random_tree = rtree(ntaxa(carbom_abund), rooted=TRUE, tip.label=taxa_names(carbom_abund))
physeq1 = merge_phyloseq(carbom_abund,random_tree)
plot_heatmap(physeq1,
taxa.label = "species",
sample.order = "collection_date") +
facet_grid(~ date, switch = "x", scales = "free_x", space = "free_x")+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(label = paste0("Diversity of GTDB-predicted species in the piglet population"))
TAX
plot_heatmap(physeq1,
taxa.label = "Species",
sample.order = "collection_date") +
facet_grid(~ collection_date, switch = "x", scales = "free_x", space = "free_x")+
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle(label = paste0("Diversity of GTDB-predicted species in the piglet population"))
physeq1
carbom_abund
carbom_rarefied
carbom
# NORMALIZATION BY RAREFACTION
carbom <- phyloseq(gOTU,TAX,samples)
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (collection_date %in% c("t0","t1","t2","t3","t4","t5", "t6","t7","t8","t9","t10")))
c <- carbom_rarefied
gt_diversity_samples <- plot_richness(c, measures=c("Chao1","Shannon", "ACE", "Shannon", "Simpson", "InvSimpson", "Fisher"),
color="collection_date", x="collection_date") +
guides(colour = guide_legend(nrow = 1))+
theme(legend.position="top")
gt_diversity_samples
c
comparison <- data.frame(comparison=c("t2-t0", "t4-t2", "t6-t4", "t8-t6", "t10-t8"))
gt_diversity_samples$data
Chao1_data <- gt_diversity_samples$data %>%
filter(collection_date=="t0"|collection_date=="t2"|collection_date=="t4"|collection_date=="t6"|collection_date=="t8"|collection_date=="t10") %>%
filter(variable=="Chao1")
Shannon_data <- gt_diversity_samples$data %>%
dplyr::filter(collection_date=="t0"|collection_date=="t2"|collection_date=="t4"|collection_date=="t6"|collection_date=="t8"|collection_date=="t10") %>%
dplyr::filter(variable=="Shannon")
Simpson_data <- gt_diversity_samples$data %>%
dplyr::filter(collection_date=="t0"|collection_date=="t2"|collection_date=="t4"|collection_date=="t6"|collection_date=="t8"|collection_date=="t10") %>%
dplyr::filter(variable=="Simpson")
estimates_CI_ttest_fun <- function(xxx) {
# estimates and CIs:
apc <- pairwiseCI(value ~ collection_date, data=xxx,
method="Param.diff")
s <- summary(apc)
s_estimate <- round(s$estimate,2)
s_CI <- as.data.frame(s$conf.int)
s_CI$comparison <- rownames(s_CI)
s <- cbind(s_CI,s_estimate)
s$se <- round(s$estimate-s$lower,2)
# t-test with Bonferroni adjust:
apcTest <- pairwiseTest(value ~ collection_date, data=xxx,
method="t.test")
t <- summary(apcTest, p.adjust.method = "bonferroni")
st <- inner_join(s,t)
st$variable <- unique(xxx$variable)
colnames(st) <- c("lower","upper","comparison","estimate","se","p.val.adj","p.val.raw",
"group1","group2","variable")
return(st)
}
Chao1_data_stats <- estimates_CI_ttest_fun(Chao1_data)
Shannon_data_stats <- estimates_CI_ttest_fun(Shannon_data)
Simpson_data_stats <- estimates_CI_ttest_fun(Simpson_data)
Chao1_data_stats <- Chao1_data_stats %>%
inner_join(., comparison, by="comparison") %>%
dplyr::mutate(y.position=c(300,320,340,360,380))
Chao1_data_stats
Chao1_data_stats %>%
inner_join(., comparison, by="comparison")
Chao1_data_stats <- Chao1_data_stats %>%
inner_join(., comparison, by="comparison") %>%
dplyr::mutate(y.position=c(20,50,80,110,130))
Chao1_data_stats <- Chao1_data_stats %>%
inner_join(., comparison, by="comparison") %>%
dplyr::mutate(y.position=c(20,50,80,110))
Chao1_plot <- Chao1_data %>%
ggplot(., aes(x=collection_date, y=value, color=collection_date)) +
geom_boxplot(outlier.shape = NA)+
geom_jitter(size=1)+
theme(legend.position="right")+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "time point",
y = "Chao1") +
theme_minimal() +
stat_pvalue_manual(Chao1_data_stats, label = "p.val.adj")
Chao1_plot
Chao1_data
Chao1_data %>%
group_by(collection_date) %>%
dplyr::summarise()
Chao1_data %>%
group_by(collection_date) %>%
dplyr::summarise(value)
Chao1_data %>%
group_by(collection_date) %>%
dplyr::summarise(mean(value))
Chao1_data_stats
Shannon_data_stats
Shannon_data_stats <- estimates_CI_ttest_fun(Shannon_data)
Simpson_data_stats <- estimates_CI_ttest_fun(Simpson_data)
Shannon_data_stats
Chao1_data_stats <- Chao1_data_stats %>%
inner_join(., comparison, by="comparison")
Shannon_data_stats <- Shannon_data_stats %>%
inner_join(., comparison, by="comparison")
Simpson_data_stats <- Simpson_data_stats %>%
inner_join(., comparison, by="comparison")
Chao1_data_stats
Shannon_data_stats
Simpson_data_stats
Shannon_data_stats
Chao1_data_stats
Chao1_data_stats
Chao1_data_stats
Chao1_data_stats <- estimates_CI_ttest_fun(Chao1_data)
Chao1_data_stats
Chao1_data_stats
Chao1_data_stats <- Chao1_data_stats %>%
inner_join(., comparison, by="comparison")
Chao1_data_stats
Chao1_data_stats
Chao1_data_stats <- estimates_CI_ttest_fun(Chao1_data)
Shannon_data_stats <- estimates_CI_ttest_fun(Shannon_data)
Simpson_data_stats <- estimates_CI_ttest_fun(Simpson_data)
Chao1_data_stats
Chao1_data
Chao1_data
Chao1_data %>%
ggplot(., aes(x=collection_date,y=value))+
geom_point()
Chao1_data %>%
ggplot(., aes(x=collection_date,y=value))+
geom_boxplot()
Shannon_data %>%
ggplot(., aes(x=collection_date,y=value))+
geom_boxplot()
Simpson_data %>%
ggplot(., aes(x=collection_date,y=value))+
geom_boxplot()
Chao1_data_stats
Shannon_data
# NORMALIZATION BY MEDIAN SEQUENCING DEPTH
carbom <- phyloseq(gOTU,TAX,samples)
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (collection_date %in% c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9")))
carbom
# Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(carbom, standf)
sample_variables(carbom)
carbom
carbom_abund <- carbom
carbom_abund.ord <- ordinate(carbom_abund, "PCoA")
gt_ordination_plot <- plot_ordination(carbom_abund, carbom_abund.ord, type="samples", color="collection_date") +
geom_point(size=1) +
theme_bw()+
theme(axis.title = element_text(size=9),
axis.text = element_text(size=7))+
#guides(colour = guide_legend(nrow = 1))+
theme(legend.position="top")
gt_ordination_plot
library(readr)
library(tidyverse)
library(dplyr)
library(robCompositions)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(ape)
library(splitstackshape)
library(magrittr)
library(scales)
library(ggpubr)
library(pheatmap)
library(EnvStats)
library(readxl)
library(data.table)
library(FSA)
library(openxlsx)
library(purrr)
library(broom)
library(cowplot)
library(ggsci)
library(pairwiseCI)
source_dir = "/Users/12705859/metapigs_dry/source_data/" # git
middle_dir = "/Users/12705859/metapigs_dry/middle_dir/" # git
out_dir_git = "/Users/12705859/metapigs_dry/out/" # git
out_dir = "/Users/12705859/Desktop/metapigs_dry/gtdbtk/"  # local
######################################################################
# input files:
# gtdbtk_bins_completeTaxa
# no_reps_all.csv (BINS COUNTS)
# Metagenome.environmental_20190308_2.xlsx (metadata, necessary for last part, co-housing)
# OUTPUTS:
# gt_phylo_barplot.pdf
# gt_phylo_heatmap.pdf
# gt_phylo_ordination.pdf
# gt_phylo_diversity.pdf
# gt_phylo_network.pdf
# gt_phylo_heatmap_ProbioticCheck.pdf
# gt_ProbioticCheck.pdf
# gt_cohousing.pdf
######################################################################
# counts data
no_reps_all <- read.csv(paste0(middle_dir,"no_reps_all.csv"),
na.strings=c("","NA"),
check.names = FALSE,
header = TRUE)
# remove .fa extension to match bins in checkm df
no_reps_all$bin <- gsub(".fa","", no_reps_all$bin)
head(no_reps_all)
NROW(no_reps_all)
######################################################################
# load gtdbtk assignments of the bins
# load gtdbtk assignments of the bins
gtdbtk_bins <- read_csv(paste0(middle_dir,"gtdb_bins_completeTaxa"),
col_types = cols(node = col_character(),
pig = col_character()))
head(gtdbtk_bins)
######################################################################
######################################################################
# upload metadata for pen info
mdat <- read_excel(paste0(source_dir,"Metagenome.environmental_20190308_2.xlsx"),
col_types = c("text", "numeric", "numeric", "text", "text",
"text", "date", "text","text", "text", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "text", "text","text", "text", "text", "text",
"text","text", "text", "text", "text", "text","text", "text"),
skip = 12)
mdat$`*collection_date` <- as.character(mdat$`*collection_date`)
# cohort names edits:
mdat$Cohort <- plyr::mapvalues(as.character(mdat$Cohort),
from = c("Neomycin+D-scour","Neomycin+ColiGuard","D-scour"),
to = c("NeoD","NeoC","D-Scour"))
mdat2 <- mdat %>%
dplyr::filter(!Cohort=="Mothers")  %>%
dplyr::filter(!`*collection_date`=="2017-01-31"|
`*collection_date`=="2017-02-01"|
`*collection_date`=="2017-02-03") %>%
dplyr::select(isolation_source,PigPen)
colnames(mdat2) <- c("pig","pen")
mdat2 <- as.data.frame(mdat2)
mdat2 <- mdat2 %>%
group_by(pig) %>%
distinct()
NROW(mdat2)
mdat2$pen <- gsub("nan",NA,mdat2$pen)
mdat2 <- na.omit(mdat2)
# we need to keep only record of pigs that were not relocated.
mdat2 <- setDT(mdat2)[,if(.N ==1) .SD,by=pig]
######################################################################
# upload breed and bday info
suppl_piglets_details_mothers_weight <- read_excel(paste0(source_dir,"suppl_piglets_details_mothers&weight.xlsx"))
# select cols of interest
breed_bday <- suppl_piglets_details_mothers_weight %>%
dplyr::select(TATTOO,BIRTH_DAY,...8,`Nursing Dam`,STIGDAM)
# rename columns
colnames(breed_bday) <- c("pig","birth_day","breed","nurse_mother","mother")
breed_bday$birth_day <- as.character(breed_bday$birth_day)
# clean names
breed_bday$pig <- gsub("G","", breed_bday$pig)
breed_bday$pig <- gsub("T","", breed_bday$pig)
breed_bday <- as.data.frame(breed_bday)
######################################################################
# upload weight info
weights <- read_csv(paste0(source_dir,"weights.csv"),
col_types = cols(Pig = col_character(),
Room = col_character()))
colnames(weights) <- c("room","pen","pig","t0","t2","t4","t6","t8")
weights_final <- read_csv(paste0(source_dir,"weights_final.csv"),
col_types = cols(Pig = col_character(),
Room = col_character()))
colnames(weights_final) <- c("room","pen","pig","date","weight")
weights_final$date <- gsub("6-Mar","t10",weights_final$date)
weights_final$date <- gsub("7-Mar","t10",weights_final$date)
weights_final$date <- gsub("8-Mar","t10",weights_final$date)
weights_final$date <- gsub("9-Mar","t10",weights_final$date)
weights_final <- weights_final %>%
dplyr::select(pig,date,weight) %>%
dplyr::filter(!date=="10-Mar") # as it's NA
weights <- weights %>%
dplyr::select(pig,t0,t2,t4,t6,t8) %>%
pivot_longer(., cols = c(t0,t2,t4,t6,t8), names_to = "date", values_to = "weight")
weights <- as.data.frame(weights)
weights <- rbind(weights,weights_final)
NROW(weights)
######################################################################
# merge bins info to gtdbtk assignment info :
NROW(gtdbtk_bins)
NROW(no_reps_all)
head(gtdbtk_bins)
head(no_reps_all)
df0 <- merge(no_reps_all, gtdbtk_bins, by=c("pig","bin"))
# rename node as gOTU and place "gOTU_" in front of node number: a separate genomic OTU identifier for each different genome
colnames(df0)[colnames(df0) == 'node'] <- 'gOTU'
df0$gOTU <- paste0("gOTU_",df0$gOTU)
NROW(unique(df0$gOTU))
NROW(df0)
######################################################################
# merge all other info:
# add pen info (mdat2), breed and bday info (breed_bday) and weight info (weights)
# add breed and bday info (breed_bday)
df0 <- left_join(df0,breed_bday)
NROW(df0)
# add pen info (mdat2)
df0 <- left_join(df0,mdat2)
NROW(df0)
# add weight info (weights)
df0 <- left_join(df0,weights)
NROW(df0)
###########################################################################################
# TAXA
taxa_mat <- df0 %>%
dplyr::select(gOTU,species,genus,family,order,class,phylum,domain) %>%
group_by(gOTU) %>%
dplyr::slice(1)
NROW(taxa_mat)
NROW(unique(taxa_mat$gOTU))
taxa_mat_df <- as.data.frame(taxa_mat)
# to matrix
taxa_mat <- taxa_mat_df
rownames(taxa_mat) <- taxa_mat[,1]
taxa_mat[,1] <- NULL
taxa_mat <- as.matrix(taxa_mat)
# ready
NROW(unique(rownames(taxa_mat)))
head(taxa_mat_df)
######################################################################
# gOTU_mat
# columns to be kept
keep <- c("cohort","pig","bin","date","value","gOTU")
df1 <- df0[ , (names(df0) %in% keep)]
# NA to zeros
df1$value[is.na(df1$value)] <- 0
# as dates with NA was giving problems, change to class character and swap date NAs with "no-t"
df1$date <- as.character(df1$date)
df1$date[is.na(df1$date)] <- "no-t"
NROW(df1)
# sum up all the counts from the same sample (pig and date) that belong to the same OTU
df2 <- df1 %>%
group_by(pig,date,gOTU) %>%
dplyr::summarise(all_bins_value = sum(value))
NROW(df2)
NROW(unique(paste0(df2$pig,df2$date)))
# assign a unique sample name
df2$sample <- paste0(df2$date,"_",df2$pig)
# remove now pig and date (redundant)
df2$pig <- NULL
df2$date <- NULL
# long to wide
df3 <- df2 %>%
pivot_wider(names_from = sample, values_from = all_bins_value, values_fill = list(all_bins_value = 0))
# check whether this list is empty(no NAs)
check_DF <- df3[rowSums(is.na(df3)) > 0,]
NROW(check_DF)
# to matrix
gOTU_mat <- as.data.frame(df3)
rownames(gOTU_mat) <- gOTU_mat[,1]
gOTU_mat[,1] <- NULL
gOTU_mat <- as.matrix(gOTU_mat)
mode(gOTU_mat) <- "integer"
# ready
NROW(unique(rownames(gOTU_mat)))
NROW(unique(colnames(gOTU_mat)))
######################################################################
# SAMPLES
# create a sample table for phyloseq
sample_df <- df0
sample_df$sample <- paste0(sample_df$date,"_",sample_df$pig)
NROW(unique(sample_df$sample))
sample_df <- sample_df %>%
dplyr::select(sample,pig,date,cohort,pen,birth_day,breed,weight) %>%
group_by(sample) %>%
slice(1)
unique(sample_df$breed)
sample_df$breed <- gsub("Landrace x Cross bred [(]LW x D[])]","LxLWD", sample_df$breed)
sample_df$breed <- gsub("Duroc x Landrace","DxL", sample_df$breed)
sample_df$breed <- gsub("Duroc x Large white","DxLW", sample_df$breed)
sample_df$breed <- gsub("Large white x Duroc","LWxD", sample_df$breed)
sample_df$gOTU <- NULL
sample_df <- as.data.frame(sample_df)
NROW(sample_df)
head(sample_df)
# reorder dates
sample_df$date  = factor(sample_df$date, levels=c("t0",
"t1",
"t2",
"t3",
"t4",
"t5",
"t6",
"t7",
"t8",
"t9",
"t10",
"no-t"))
# reorder cohorts
sample_df$cohort  = factor(sample_df$cohort, levels=c("Control",
"D-Scour",
"ColiGuard",
"Neomycin",
"NeoD",
"NeoC",
"Mothers"))
rownames(sample_df) <- sample_df[,1]
# ready
######################################################################
# create phyloseq object
gOTU = otu_table(gOTU_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxa_mat)
samples = sample_data(sample_df)
############################################################################################################
############################################################################################################
############################################################################################################
# Prepare function for rarefaction:
myrarefy_fun <- function(your_phyloseq_obj) {
# removal of samples with low count (any sample with a count lower than 10k)
r <- which(colSums(otu_table(your_phyloseq_obj))<10000)
to_remove <- rownames(as.data.frame(r))
carbom_noFailSamples <- prune_samples(!(sample_names(your_phyloseq_obj) %in% to_remove), your_phyloseq_obj)
# RAREFY
carbom_rarefied = rarefy_even_depth(carbom_noFailSamples,
sample.size = min(sample_sums(carbom_noFailSamples)),
rngseed = 42)
return(carbom_rarefied)
}
############################################################################################################
# PLOT
######################
# ORDINATION
# NORMALIZATION BY MEDIAN SEQUENCING DEPTH
carbom <- phyloseq(gOTU,TAX,samples)
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (date %in% c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9")))
# Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(carbom, standf)
sample_variables(carbom)
# # Remove taxa if not seen in at least 30% of the samples
# carbom_abund <- filter_taxa(carbom, function(x) sum(x > 1) > (0.3*length(x)), TRUE)
carbom_abund <- carbom
carbom_abund.ord <- ordinate(carbom_abund, "NMDS", "bray")
gt_ordination_plot <- plot_ordination(carbom_abund, carbom_abund.ord, type="samples", color="date") +
geom_point(size=1) +
theme_bw()+
theme(axis.title = element_text(size=9),
axis.text = element_text(size=7))+
guides(colour = guide_legend(nrow = 1))+
theme(legend.position="top")
gt_ordination_plot
library(readr)
library(dplyr)
library(readxl)
library(splitstackshape)
library(data.table)
library(robCompositions)
library(tidyr)
library(tidyverse)
library(ggbiplot)
library(magrittr)
library(ggpubr)
library(grDevices)
library(colorRamps)
library(EnvStats)
library(corrplot)
library(grid)
library(cowplot)
library(factoextra)
library(broom)
library(openxlsx)
source_data = "/Users/12705859/metapigs_base/source_data/" # git
middle_dir = "/Users/12705859/metapigs_base/middle_dir/" # git
out_dir = "/Users/12705859/Desktop/metapigs_base/sortmerna/" # local
###########################################################################################
# upload sortmerna output (from the original output we retained columns:plate_well, 16Sgene ID, e-value)
# and we filtered out all the 16S rRNA genes below e-30 threshold
so <- read_table2(paste0(out_dir,"sortmeall_evaluefiltered.tsv"), col_names = FALSE)
