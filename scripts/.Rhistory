aov.out = aov(pc1 ~ Cohort, data=df1_sub)
res <- TukeyHSD(aov.out)
aov.out <- as.data.frame(res$Cohort)
aov.out3 <- tibble::rownames_to_column(aov.out, "comparison")
aov.out3$type="pc1"
#
aov.out = aov(pc2 ~ Cohort, data=df1_sub)
res <- TukeyHSD(aov.out)
aov.out <- as.data.frame(res$Cohort)
aov.out4 <- tibble::rownames_to_column(aov.out, "comparison")
aov.out4$type="pc2"
#
aov.out = aov(pc3 ~ Cohort, data=df1_sub)
res <- TukeyHSD(aov.out)
aov.out <- as.data.frame(res$Cohort)
aov.out5 <- tibble::rownames_to_column(aov.out, "comparison")
aov.out5$type="pc3"
#
aov.out = aov(pc4 ~ Cohort, data=df1_sub)
res <- TukeyHSD(aov.out)
aov.out <- as.data.frame(res$Cohort)
aov.out6 <- tibble::rownames_to_column(aov.out, "comparison")
aov.out6$type="pc4"
#
aov.out = aov(pc5 ~ Cohort, data=df1_sub)
res <- TukeyHSD(aov.out)
aov.out <- as.data.frame(res$Cohort)
aov.out7 <- tibble::rownames_to_column(aov.out, "comparison")
aov.out7$type="pc5"
by_Cohort_t8 <- rbind(aov.out1,
aov.out2,
aov.out3,
aov.out4,
aov.out5,
aov.out6,
aov.out7)
by_Cohort_t8$group = "Cohort_t8"
all_padj_Tukey <- rbind(by_cross_breed,
by_LINE,
by_BIRTH_DAY,
by_BIRTH_DAY_Duroc_x_Landrace,
by_BIRTH_DAY_Duroc_x_Large_white,
by_BIRTH_DAY_Large_white_x_Duroc,
by_nurse_sow,
by_maternal_sow,
by_Cohort,
by_Cohort_t0,
by_Cohort_t1,
by_Cohort_t2,
by_Cohort_t3,
by_Cohort_t4,
by_Cohort_t5,
by_Cohort_t6,
by_Cohort_t7,
by_Cohort_t8
)
all_padj_Tukey$test <- "anova"
all_padj_Tukey$padj_method <- "TukeyHSD"
# write out in workbook
addWorksheet(wb, "all_padj_Tukey")
writeData(wb, sheet = "all_padj_Tukey", all_padj_Tukey, rowNames = FALSE)
# plot p-values for start factors
piglets_factors <- all_pvalues %>%
dplyr::filter(grouping != "cohorts" &
grouping != "ctrl_neo" &
grouping != "DScour_ColiGuard" &
grouping != "NeoD_NeoC" &
collection_date != "all")
piglets_factors$grouping <- gsub("birth day - Duroc x Large white",
"birth day - DxLW",piglets_factors$grouping)
piglets_factors$grouping <- gsub("birth day - Duroc x Landrace",
"birth day - DxL",piglets_factors$grouping)
piglets_factors2 <- all_padj_Hommel %>%
filter(grouping != "cohorts" &
grouping != "ctrl_neo" &
grouping != "Dscour_ColiGuard" &
grouping != "NeoD_NeoC" &
collection_date != "all")
piglets_factors2$grouping <- gsub("birth day - Duroc x Large white",
"birth day - DxLW",piglets_factors2$grouping)
piglets_factors2$grouping <- gsub("birth day - Duroc x Landrace",
"birth day - DxL",piglets_factors2$grouping)
unique(piglets_factors$grouping)
unique(piglets_factors2$grouping)
# order to show facets:
piglets_factors$grouping <- factor(piglets_factors$grouping,
levels=c("birth day",
"birth day - DxL",
"birth day - DxLW",
"cross_breed",
"maternal_sow",
"nurse_sow",
"line"))
piglets_factors2$grouping <- factor(piglets_factors2$grouping,
levels=c("birth day",
"birth day - DxL",
"birth day - DxLW",
"cross_breed",
"maternal_sow",
"nurse_sow",
"line"))
# alpha
df <- piglets_factors %>%
pivot_longer(cols=c('unrooted_pd','bwpd'))
colnames(df)[colnames(df)=="name"] <- "parameter"
df2 <- piglets_factors2 %>%
pivot_longer(cols=c('unrooted_pd','bwpd'))
colnames(df2)[colnames(df2)=="name"] <- "parameter"
df$grouping <- gsub(" - ","\n",df$grouping)
df2$grouping <- gsub(" - ","\n",df2$grouping)
df$grouping <- gsub("_","\n",df$grouping)
df2$grouping <- gsub("_","\n",df2$grouping)
# re-order dates
df2$collection_date <- factor(df2$collection_date,
levels=c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10"))
alpha_plot <- ggplot(df, aes(x=collection_date,y=value)) +
ylim(0,0.06)+
labs(y="alpha diversity - p-value",
x="")+
theme_bw()+
geom_point(data=df2,aes(shape=parameter), color="red", size=2)+
geom_point(aes(shape=parameter), color="black", size=2)+
theme(axis.text.x=element_text(size=3),
axis.text.y=element_text(size=6),
axis.title.x=element_text(size=8),
axis.title.y=element_text(size=8),
legend.position="right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 9))+
facet_grid(~grouping)+
geom_hline(yintercept=0.05, linetype="dashed",
color = "black", size=0.5)
# beta
df <- piglets_factors %>%
pivot_longer(cols=c(contains('pc')))
colnames(df)[colnames(df)=="name"] <- "parameter"
df2 <- piglets_factors2 %>%
pivot_longer(cols=c(contains('pc')))
colnames(df2)[colnames(df2)=="name"] <- "parameter"
df$grouping <- gsub(" - ","\n",df$grouping)
df2$grouping <- gsub(" - ","\n",df2$grouping)
df$grouping <- gsub("_","\n",df$grouping)
df2$grouping <- gsub("_","\n",df2$grouping)
# re-order dates
df2$collection_date <- factor(df2$collection_date,
levels=c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10"))
beta_plot <- ggplot(df, aes(x=collection_date,y=value)) +
ylim(0,0.06)+
labs(y="beta diversity - p-value",
x="")+
theme_bw()+
geom_point(data=df2,aes(shape=parameter), color="red", size=2)+
geom_point(aes(shape=parameter), color="black", size=2)+
theme(axis.text.x=element_text(size=3),
axis.text.y=element_text(size=6),
axis.title.x=element_text(size=8),
axis.title.y=element_text(size=8),
legend.position="right",
legend.title = element_text(size = 10),
legend.text = element_text(size = 9))+
facet_grid(~grouping)+
geom_hline(yintercept=0.05, linetype="dashed",
color = "black", size=0.5)
start_factors_pvalues_plot <- ggarrange(
alpha_plot, beta_plot,ncol=1,nrow=2, labels = c("A","B")
)
pdf(paste0(out_dir,"start_factors_pvalues.pdf"))
start_factors_pvalues_plot
dev.off()
###########################################################################################
# cite packages
sink(paste0(out_dir,"metapigs_base_packages_citations.bib"))
out <- sapply(names(sessionInfo()$otherPkgs),
function(x) print(citation(x), style = "Bibtex"))
sink()
###########################################################################################
###########################################################################################
###########################################################################################
# comment Examiner 3:
# p95 A plot where only p-values are shown.
# Plotting estimates of the diversity indices
# (or the difference in diversity indices)
# along with confidence intervals is vastly preferable.
# EXTRA : as asked by Examiner 3:
head(all_padj_Hommel)
out <- all_padj_Hommel %>%
pivot_longer(cols=3:9) %>%
dplyr::filter(value <= 0.05) %>%
dplyr::filter(!grouping=="birth day - Duroc x Landrace")
head(out)
out$grouping <- gsub(pattern = "line","LINE", out$grouping)
out$grouping <- gsub(pattern = "birth day","BIRTH_DAY", out$grouping)
head(df1)
df1$BIRTH_DAY <- as.character(df1$BIRTH_DAY)
df_final <- data.frame()
for (row in 1:nrow(out)) {
var_to_sel <- out[row,6]
coll_date <- out[row,1]
group_sel <- as.data.frame(out[row,3])
test <- df1[df1$collection_date %in% coll_date,]
test <- test %>%
dplyr::select(group_sel$grouping,isolation_source,collection_date,var_to_sel$name)
test <- as.data.frame(test)
test$id <- paste0("set_",row)
test$grouping <- paste0(as.character(group_sel$grouping))
test$variable=paste0(var_to_sel)
colnames(test) <- c("spec","isolation_source","collection_date","variable_values","id","grouping","variable")
df_final <- rbind(df_final,test)
}
# splitting into multiple dataframes (by set)
multi_df <- split( df_final , f = df_final$id )
plot_me <- function(split_df) {
# df as dataframe
df0 <- as.data.frame(split_df)
# plot
return(print(df0 %>%
ggplot(., aes(x=spec,y=variable_values))+
geom_boxplot(lwd=0.2, outlier.size = 0.5)+
stat_n_text(size = 1.5)+
coord_flip()+
ylab(paste0(df0$variable))+
xlab(paste0(df0$grouping))+
theme(axis.text.y=element_text(size=4, vjust = 0, angle=68),
axis.text.x=element_text(size=4),
axis.title.x=element_text(size=8),
axis.title.y=element_text(size=8))+
facet_grid(~collection_date, scale="free")))
}
p1<-plot_me(df_final %>% dplyr::filter(id=="set_1"))
p2<-plot_me(df_final %>% dplyr::filter(id=="set_2"))
p3<-plot_me(df_final %>% dplyr::filter(id=="set_3"))
p4<-plot_me(df_final %>% dplyr::filter(id=="set_4"))
p5<-plot_me(df_final %>% dplyr::filter(id=="set_5"))
p6<-plot_me(df_final %>% dplyr::filter(id=="set_6"))
p7<-plot_me(df_final %>% dplyr::filter(id=="set_7"))
#plot_me(df_final %>% dplyr::filter(id=="set_8"))  # this one is already plotted in a suppl. figure
#plot_me(df_final %>% dplyr::filter(id=="set_9"))  # this one is already plotted in a suppl. figure
#plot_me(df_final %>% dplyr::filter(id=="set_10"))  # this one is already plotted in a suppl. figure
# extra plot:
out2 <- all_padj_Hommel %>%
pivot_longer(cols=3:9) %>%
dplyr::filter(value <= 0.05) %>%
dplyr::filter(grouping=="birth day - Duroc x Landrace")
head(out2)
p8<-df1 %>%
dplyr::filter(cross_breed=="Duroc x Landrace") %>%
dplyr::filter(collection_date=="t2") %>%
dplyr::select(isolation_source,pc2,BIRTH_DAY,collection_date,cross_breed) %>%
ggplot(., aes(x=BIRTH_DAY,y=pc2))+
geom_boxplot(lwd=0.2, outlier.size = 0.5)+
stat_n_text(size = 1.5)+
coord_flip()+
theme(axis.text.y=element_text(size=4, vjust = 0, angle=68),
axis.text.x=element_text(size=4),
axis.title.x=element_text(size=8),
axis.title.y=element_text(size=8))+
facet_grid(~collection_date, scale="free")
# put them together:
sign_plots <- ggarrange(p1,p2,p3,p4,
p5,
#p6,p7, # these are the mothers (already plotted in other plots)
p8,
ncol = 4, nrow=2)
pdf(paste0(out_dir,"start_factors_pvalues_boxplots.pdf"))
sign_plots
dev.off()
merged_sign_plots <- ggarrange(start_factors_pvalues_plot,
sign_plots, labels = c("","C"),
ncol = 1, nrow=2)
pdf(paste0(out_dir,"start_factors_pvalues_merged.pdf"))
merged_sign_plots
dev.off()
CI_me <- function(split_df) {
# df as dataframe
df0 <- as.data.frame(split_df)
# plot
return(df0 %>%
group_by(id,collection_date,grouping,variable,spec) %>%
dplyr::summarise(mean.variable_values = mean(variable_values, na.rm = TRUE),
sd.variable_values = sd(variable_values, na.rm = TRUE),
n.variable_values = n()) %>%
dplyr::mutate(se.variable_values = sd.variable_values / sqrt(n.variable_values),
lower.ci.variable_values = mean.variable_values - qt(1 - (0.05 / 2), n.variable_values - 1) * se.variable_values,
upper.ci.variable_values = mean.variable_values + qt(1 - (0.05 / 2), n.variable_values - 1) * se.variable_values)
)
}
CIs <- rbind(as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_1"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_2"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_3"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_4"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_5"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_6"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_7"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_8"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_9"))),
as.data.frame(CI_me(df_final %>% dplyr::filter(id=="set_10"))))
# write out in workbook
addWorksheet(wb, "confidence_intervals")
writeData(wb, sheet = "confidence_intervals", CIs, rowNames = FALSE)
######################################################################################################
######################################################################################################
######################################################################################################
# save stats in workbook
saveWorkbook(wb, paste0(out_dir_git,"stats.xlsx"), overwrite=TRUE)
###########################################################################################
######################################################################################################
library(readxl)
library(data.table)
library(readr)
library(splitstackshape)
library(dplyr)
library(tidyr)
# rationale:
##### previous steps:
# 1 # guppy fat is run
# 3 # .xml conversion to .txt:
# run forester.jar from command line to convert the .xml file to phyloXML - R readable format (.txt) :
# this way:
# java -cp /Users/12705859/Downloads/forester_1050.jar
# org.forester.application.phyloxml_converter -f=dummy file.xml file.txt
# in a loop:
# for fpath in /Users/12705859/Desktop/metapigs_base/phylosift/guppy/guppy_output/*.gz.xml;
# do java -cp /Users/12705859/Downloads/forester_1050.jar
# org.forester.application.phyloxml_converter -f=dummy "$fpath"
# "/Users/12705859/Desktop/metapigs_base/phylosift/guppy/guppy_output/$(basename "$fpath").txt";
# done
##### HERE :
# 1 # .xml files are read in and parsed
# 2 # output can be used in guppy_plots.R
######################################################################################################
middle_dir = "/Users/12705859/metapigs_base/middle_dir/" # git
guppyout_dir = "/Users/12705859/Desktop/metapigs_base/phylosift/guppy/guppy_output" # local
######################################################################################################
my.files = list.files(guppyout_dir,pattern=".gz.xml.txt")
my.files
library(readr)
reads <- read_table2("~/Downloads/reads.tsv")
View(reads)
library(splitstackshape)
reads <- cSplit(reads, "r1_filename","/")
reads
reads <- cSplit(reads, "r1_filename_2","_")
reads
reads$DNA_plate <- paste0(r1_filename_2_1,"_",r1_filename_2_2)
reads$DNA_plate <- paste0(reads$r1_filename_2_1,"_",reads$r1_filename_2_2)
reads
# CONTENT WARNING
# This is the longest chunk of code I have ever written (also my first script)
# please please do not ask me to refactor it
# Anticipated apologies to those who will attempt reading it
######################################################
#                                                    #
#       "Abandon all hope, ye who enter here."       #
#                                                    #
######################################################
#################################
#  R version 3.6.1 (2019-07-05)
# 0   # loading input data
# 1   # batch effect (plot,removal and plot again)
# 1.1 # merge alpha div data with metadata -> boggo
# 1.2 # merge beta div data with metadata -> coggo
# 2   # plot samples distribution (plate vs time; cohorts vs time)
# 2.1 # boggo and coggo: formatting & averaging duplicates
# 3   # DELTAS
# 4   # plot ALPHA diversity (all timepoints)
# 5   # plot BETA diversity (all timepoints)
# 6   # plot ALPHA diversity (at pig trial start)
# 7   # plot BETA diversity (at pig trial start)
# 8   # plot distribution of cross_breeds and bdays among cohorts + cohorts distr plates
# 9   # p-values
# 10 # plot p-values (starting/individual factors)
# 11  # prepare input files for guppy (select by time interval) and plot output
###########################################################################################
# install packages
#pkgs <- c("ggbiplot","ggpubr","sva","tidyverse","broom","cowplot","data.table","dunn.test","plyr",
#           "dplyr","forcats","ggplot2","gridExtra","plotrix","readr","readxl","tidyr","varhandle","tibble","purr","remotes")
#install.packages(pkgs[], repos='https://cran.rstudio.com', dependencies = TRUE)
#remotes::install_github("vqv/ggbiplot")
###########################################################################################
#BiocManager::install("sva")
#BiocManager::install("genefilter")
# load libraries
library(magick)
library(tiff)
library(rstatix)
library(ggbiplot) # ggbiplot_0.55
library(ggpubr) # ggpubr_0.2.4
library(sva) # sva_3.32.1
library(tidyverse) # tidyverse_1.3.0
library(broom) # broom_0.5.2
library(cowplot) # cowplot_1.0.0
library(data.table) # data.table_1.12.8
library(dunn.test) # dunn.test_1.3.5
library(plyr) # plyr_1.8.5
library(dplyr) # dplyr_0.8.3
library(forcats) # forcats_0.4.0
library(ggplot2) # ggplot2_3.2.1
library(gridExtra) # gridExtra_2.3
library(plotrix) # plotrix_3.7-7
library(readr) # readr_1.3.1
library(readxl) # readxl_1.3.1
library(tidyr) # tidyr_1.0.0
library(varhandle) # varhandle_2.0.4
library(tibble) # tibble_2.1.3
library(purrr) # purrr_0.3.3
library(openxlsx)
#library(genefilter)
#library(compareGroups)
library(splitstackshape)
library(pheatmap) # used in pos_controls_reads.R
library(magrittr)
library(EnvStats)
source_data = "/Users/12705859/metapigs_base/source_data/" # git
middle_dir = "/Users/12705859/metapigs_base/middle_dir/" # git
out_dir_git = "/Users/12705859/metapigs_base/out/" # git
out_dir = "/Users/12705859/Desktop/metapigs_base/phylosift/out/" # local
###########################################################################################
# 0   # loading input data
# tiffs (timelines)
timeline_deltas_unroo <- image_read(paste0(out_dir,"Slide11.tiff"))
timeline_deltas_bw <- image_read(paste0(out_dir,"Slide12.tiff"))
# load metadata
mdat <- read_excel(paste0(source_data,"Metagenome.environmental_20190308_2.xlsx"),
col_types = c("text", "numeric", "numeric", "text", "text",
"text", "date", "text","text", "text", "numeric",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "text", "text","text", "text", "text", "text",
"text","text", "text", "text", "text", "text","text", "text"),
skip = 12)
mdat$Cohort <- gsub("Sows","Sows",mdat$Cohort)
mdat$Cohort <- gsub("D-scour","D-Scour", mdat$Cohort)
# formatting metadata column names
mdat$`*collection_date` <- as.character(mdat$`*collection_date`)
colnames(mdat)[colnames(mdat) == '*collection_date'] <- 'collection_date'
colnames(mdat)[colnames(mdat) == '*sample_name'] <- 'sample_name'
mdat <- mdat %>%
dplyr::select(isolation_source,collection_date,Cohort,DNA_plate,DNA_well,PigPen)
####
# date formatting:
from = c("2017-01-30",
"2017-01-31","2017-02-01",
"2017-02-03",
"2017-02-06","2017-02-07","2017-02-08",
"2017-02-10",
"2017-02-14",
"2017-02-16","2017-02-17",
"2017-02-21",
"2017-02-24",
"2017-02-28",
"2017-03-03",
"2017-03-06","2017-03-07","2017-03-08","2017-03-09","2017-03-10",
"2017-08-14", #mock community
"2018-01-24",  #probiotics - pos controls
NA) # neg controls
to = c("tM",
"t0","t0",
"t1",
"t2","t2","t2",
"t3",
"t4",
"t5","t5",
"t6",
"t7",
"t8",
"t9",
"t10","t10","t10","t10","t10",
"tNONE", #mock community
"tNONE", #probiotics - pos controls
"tNONE") #neg controls
# replace collection dates (date format) with groups of collection dates (character format)
mdat$collection_date <- plyr::mapvalues(as.character(mdat$collection_date), from, to)
unique(mdat$collection_date)
####
mdat
NROW(mdat)
mdat %>% dplyr::select(DNA_plate,DNA_well)
sel <- mdat %>% dplyr::select(DNA_plate,DNA_well)
colnames(reads)
reads
colnames(reads) <- c("r2_filename","x1","x2" "x3",
"DNA_well","x4" ,"x5" ,"x6" ,"DNA_plate")
reads <- read_table2("~/Downloads/reads.tsv")
reads <- cSplit(reads, "r1_filename","/")
reads <- cSplit(reads, "r1_filename_2","_")
reads$DNA_plate <- paste0(reads$r1_filename_2_1,"_",reads$r1_filename_2_2)
colnames(reads)
c("r2_filename","x1","x2" "x3","DNA_well","x4" ,"x5" ,"x6" ,"DNA_plate")
colnames(reads) <- c("r2_filename","x1","x2","x3","DNA_well","x4" ,"x5" ,"x6" ,"DNA_plate")
reads
reads %>% dplyr::select(DNA_plate,DNA_well,r2_filename)
reads <- reads %>% dplyr::select(DNA_plate,DNA_well,r2_filename)
reads
inner_join(reads,sel)
reads <- inner_join(reads,sel)
reads
gsub("R2","R1",r2_filename)
gsub("R2","R1",reads$r2_filename)
reads$r1_filename <- gsub("R2","R1",reads$r2_filename)
reads
reads %>% dplyr::select(r1_filename,r2_filename)
reads <- reads %>% dplyr::select(r1_filename,r2_filename)
View(reads)
paste0("/shared/homes/s1/pig_microbiome/MON5838",reads$r1_filename)
reads
paste0("/shared/homes/s1/pig_microbiome/MON5838/",reads$r1_filename)
reads$r1_filename <- paste0("/shared/homes/s1/pig_microbiome/MON5838/",reads$r1_filename)
reads$r2_filename <- paste0("/shared/homes/s1/pig_microbiome/MON5838/",reads$r2_filename)
reads
fwrite(x=reads, file="~/Desktop/reads.tsv")
fwrite(x=reads, file="~/Desktop/all_reads.csv")
fwrite(x=reads, file="~/Desktop/all_reads.txt")
fwrite(x=reads, file="~/Desktop/all_reads.txt", col.names = TRUE, sep = " ")
